#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

;;; start
(ql:quickload
'(:eazy-gnuplot :trivia :trivia.ppcre
  :iterate :alexandria :local-time)
 :silent t)
(defpackage graph
  (:use :cl :eazy-gnuplot :trivia :trivia.ppcre
        :iterate :alexandria :local-time))
(in-package :graph)

(defun read-lines (input)
  (iter (for path in (directory input))
        (appending
         (with-open-file (s path)
           (do ((line (read-line s nil nil) (read-line s nil nil))
                (acc nil (cons line acc)))
               ((null line) (nreverse acc)))))))

(defun core-line-p (line)
  (match line
    ((list* _ (symbol (name (ppcre ".*CORE.*"))) _) t)))

(defun jobs-line-p (line)
  (match line
    ((list* _ 'jobs _) t)))

(defun node= (a b)
  (match* (a b)
    (((list* node _)
      (list* (eq node) _)) t)))

(defun core= (a b)
  (match* (a b)
    (((list* _ core _)
      (list* _ (eq core) _)) t)))

(defun adapter= (a b)
  (match* (a b)
    (((list* _ _ adap _)
      (list* _ _ (eq adap) _)) t)))

(defun group-by (equality list)
  (iter (with buckets = nil)
        (for x in list)
        (iter (for b in buckets)
              (when (funcall equality (first b) x)
                (push x (cdr b))
                (leave))
              (finally
               (push (list x) buckets)))
        (finally (return buckets))))

(defvar *adapters* '(coretemp-isa-0000 coretemp-isa-0001 i5k_amb-isa-0000))
(defvar *cores* '(core-0 core-1 core-2 core-3))
(defvar *nodes* '(fun000 fun001 fun002 fun003
                  fun004 fun005 fun006 fun007
                  fun008 fun009 funlucy))

(defun draw-temp (s bucket)
  (match (first bucket)
    ((list* node _)
     (flet ((data ()
              (iter (for line in (remove-duplicates
                                  (sort bucket #'< :key #'fifth)
                                  :key #'fifth))
                    (for pline previous line)
                    (for ppline previous pline)
                    (match* (ppline pline line)
                            ((nil
                              (list* _ _ _ _ time2 temp _)
                              _)
                             (format s "~&~a ~a ~4,2f"
                                     (timestamp-to-unix
                                      (timestamp+
                                       (unix-to-timestamp time2) 9 :hour))
                                     temp
                                     MOST-POSITIVE-FIXNUM))
                            (((list* _ _ _ _ time1 _)
                              (list* _ _ _ _ time2 temp _)
                              (list* _ _ _ _ time3 _))
                             (format s "~&~a ~a ~4,2f"
                                     (timestamp-to-unix
                                      (timestamp+
                                       (unix-to-timestamp time2) 9 :hour))
                                     temp
                                     (float (/ (- time3 time1) 1800)))))
                    (finally
                     (match line
                            ((list* _ _ _ _ time3 temp _)
                             (format s "~&~a ~a ~4,2f"
                                     (timestamp-to-unix
                                      (timestamp+
                                       (unix-to-timestamp time3) 9 :hour))
                                     temp
                                     MOST-POSITIVE-FIXNUM)))))))
       (plot #'data
             :using '(1 2)
             :title (princ-to-string node)
             :smooth :bezier
             :axes :x1y1
             :with :lines
             :lw 2)))))

(defun draw-jobs (s bucket)
  (plot (lambda ()
          (iter (for line in (remove-duplicates
                              (sort bucket #'< :key #'fifth)
                              :key #'fifth))
                (for pline previous line)
                (for ppline previous pline)
                (match* (ppline pline line)
                  ((nil
                    (list 'funlucy 'jobs 'torque _ time2 jobs)
                    _)
                   (format s "~&~a ~a ~4,2f"
                           (timestamp-to-unix
                            (timestamp+
                             (unix-to-timestamp time2) 9 :hour))
                           jobs
                           MOST-POSITIVE-FIXNUM))
                  (((list 'funlucy 'jobs 'torque _ time1 _)
                    (list 'funlucy 'jobs 'torque _ time2 jobs)
                    (list 'funlucy 'jobs 'torque _ time3 _))
                   (format s "~&~a ~a ~4,2f"
                           (timestamp-to-unix
                            (timestamp+
                             (unix-to-timestamp time2) 9 :hour))
                           jobs
                           (float (/ (- time3 time1) 1800)))))
                (finally
                 (match line
                        ((list 'funlucy 'jobs 'torque _ time3 jobs)
                         (format s "~&~a ~a ~4,2f"
                                 (timestamp-to-unix
                                  (timestamp+
                                   (unix-to-timestamp time3) 9 :hour))
                                 jobs
                                 MOST-POSITIVE-FIXNUM))))))
        :using '(1 2)
        :title "Jobs remaining"
        :smooth :bezier
        :axes :x1y2
        :with :lines
        :lw 2))

(defun draw-jobs-raw (s bucket)
  (plot (lambda ()
          (iter (for line in ;; (sort bucket #'< :key #'fifth)
                     (remove-duplicates
                              (sort bucket #'< :key #'fifth)
                              :key #'fifth)
                     )
                (match line
                       ((list 'funlucy 'jobs 'torque _ time2 jobs)
                        (format s "~&~a ~a" ; ~4,2f
                                (timestamp-to-unix
                                 (timestamp+
                                  (unix-to-timestamp time2) 9 :hour))
                                jobs)))))
        :using '(1 2)
        :notitle '()
        :axes :x1y2
        :with :points))

(defun read-many (line-string)
  (with-input-from-string (s line-string)
    (iter (for it = (read s nil nil))
          (while it)
          (collect it))))

(defun make-pdf (input output offset duration)
  (with-plots (s)
    (gp-setup :terminal `(,(pathname-type output)
                           :enhanced
                           :background :rgb "gray75"
                           :font "Times New Roman, 10")
              :title "Temparature Logs in Room 313 (CPU Core Temp)"
              :key '(:rmargin
                     :spacing 2
                     :horizontal
                     :maxrows 20
                     :maxcols 1)
              :samples 1000
              :autoscale :y2
              :style '(:fill :transparent :solid 0.5)
              :yrange :|[:110]|
              :xdata :time
              :timefmt "%s"
              :format '(:x "%Y/%m/%d\\n%H:%M")
              :ylabel "Core Temparature (deg.)"
              :ytics :nomirror
              :y2label "Queued Jobs"
              :y2tics '()
              :grid '(:xtics :ytics)
              :xrange (make-keyword
                       (let ((now (timestamp+ (now) (+ 9 offset) :hour)))
                         (format nil "[\"~a\":\"~a\"]"
                                 (timestamp-to-unix
                                  (timestamp- now duration :hour))
                                 (timestamp-to-unix now))))
              :output (make-pathname :name (format nil "~a-~ahrs"
                                                   (pathname-name output)
                                                   duration)
                                     :defaults output)
              :pointsize "0.2px")
    (func-plot "88" :title "Danger Line\\n(Shutdown Required)")
    (func-plot "100" :title "Critical Line\\n(Forced Shutdown)")
    (mapc (curry #'draw-temp s)
          (group-by #'node=
                    ;; (conjoin #'node= #'core= #'adapter=)
                    (remove-if-not #'core-line-p
                                   (mapcar #'read-many (read-lines input)))))
    (draw-jobs s
               (remove-if-not #'jobs-line-p
                              (mapcar #'read-many (read-lines input))))
    (draw-jobs-raw s
                   (remove-if-not #'jobs-line-p
                                  (mapcar #'read-many (read-lines input))))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (make-pdf "./*-latest.log" "funcluster-latest.pdf" 1/2 24)
  (make-pdf "./*-latest.log" "funcluster-latest.pdf" 1/2 (* 24 3))
  (make-pdf "./*-latest.log" "funcluster-latest.pdf" 1/2 (* 24 7))
  (make-pdf "./*.log" "funcluster-latest.pdf" 1/2 (* 24 31))
  (make-pdf "./*.log" "funcluster-latest.pdf" 1/2 (* 24 31 12)))

