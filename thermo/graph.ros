#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

(ql:quickload
'(:eazy-gnuplot :trivia :trivia.ppcre
  :iterate :alexandria :local-time)
 :silent t)
(defpackage graph
  (:use :cl :eazy-gnuplot :trivia :trivia.ppcre
        :iterate :alexandria :local-time))
(in-package :graph)

(defun read-lines (input)
  (iter (for path in (directory input))
        (appending
         (with-open-file (s path)
           (do ((line (read-line s nil nil) (read-line s nil nil))
                (acc nil (cons line acc)))
               ((null line) acc))))))

(defun core-line-p (line)
  (match line
    ((list* _ (symbol (name (ppcre ".*CORE.*"))) _) t)))

(defun jobs-line-p (line)
  (match line
    ((list* _ 'jobs _) t)))

(defun node= (a b)
  (match* (a b)
    (((list* node _)
      (list* (eq node) _)) t)))

(defun core= (a b)
  (match* (a b)
    (((list* _ core _)
      (list* _ (eq core) _)) t)))

(defun adapter= (a b)
  (match* (a b)
    (((list* _ _ adap _)
      (list* _ _ (eq adap) _)) t)))

(defun group-by (equality list)
  (iter (with buckets = nil)
        (for x in list)
        (iter (for b in buckets)
              (when (funcall equality (first b) x)
                (push x (cdr b))
                (leave))
              (finally
               (push (list x) buckets)))
        (finally (return buckets))))

(defvar *adapters* '(coretemp-isa-0000 coretemp-isa-0001 i5k_amb-isa-0000))
(defvar *cores* '(core-0 core-1 core-2 core-3))
(defvar *nodes* '(fun000 fun001 fun002 fun003
                  fun004 fun005 fun006 fun007
                  fun008 fun009 funlucy))

(defun draw-temp (s bucket)
  (match (first bucket)
    ((list* node _)
     (flet ((data ()
              (iter (for line in bucket)
                    (match line
                           ((list _ core adap _ time temp _ _)
                            (when (and (zerop (position core *cores*))
                                       (zerop (position adap *adapters*)))
                              (format s "~&~a ~a"
                                      (timestamp-to-unix
                                       (timestamp+
                                        (unix-to-timestamp time) 9 :hour))
                                      temp)))))))
       ;; (plot #'data
       ;;       :using '(1 2)
       ;;       :title (princ-to-string node)
       ;;       :with :points)
       (plot #'data
             :using '(1 2)
             :title (princ-to-string node)
             ;; :notitle '()
             ;; :smooth :csplines
             :smooth :bezier
             :axes :x1y1
             :with :lines
             :lw 2)))))

(defun draw-jobs (s bucket)
  (flet ((data ()
           (iter (for line in bucket)
                 (ematch line
                   ((list 'funlucy 'jobs 'torque _ time jobs)
                    (format s "~&~a ~a"
                            (timestamp-to-unix
                             (timestamp+
                              (unix-to-timestamp time) 9 :hour))
                            jobs))))))
    (plot #'data
          :using '(1 2)
          :title "Jobs remaining"
          ;; :smooth :csplines
          :smooth :bezier
          :axes :x1y2
          :with :lines
          :lw 2)))

(defun read-many (line-string)
  (with-input-from-string (s line-string)
    (iter (for it = (read s nil nil))
          (while it)
          (collect it))))

(defun main (input output &rest argv)
  (declare (ignorable argv))
  (with-plots (s :debug t)
    (gp-setup :terminal `(,(pathname-type output)
                           ;; (match (pathname-type output)
                           ;;   ("png" :pngcairo)
                           ;;   (it it))
                           ;; :size :|1200,800|
                           :enhanced
                           ;; :monochrome
                           :background :rgb "gray75"
                           :font "Times New Roman, 10")
              :title "Temparature Logs in Room 313 (CPU Core Temp)"
              :key '(:outside :rmargin
                     :spacing 2
                     :horizontal
                     :maxrows 20
                     :maxcols 1
                     )
              :autoscale :y2
              :style '(:fill :transparent :solid 0.5)
              :yrange :|[:110]|
              :xdata :time
              :timefmt "%s"
              :format '(:x "%Y/%m/%d\\n%H:%M")
              :ylabel "Core Temparature (deg.)"
              :ytics :nomirror
              :y2label "Queued Jobs"
              :y2tics '()
              :grid :xy
              :xrange (make-keyword
                       (let ((now (timestamp+ (now) 9.5 :hour)))
                         (format nil "[\"~a\":\"~a\"]"
                                 (timestamp-to-unix
                                  (timestamp- now 1 :day))
                                 (timestamp-to-unix now))))
              :output output
              :pointsize "0.2px")
    (func-plot "88" :title "Danger Line\\n(Shutdown Required)")
    (func-plot "100" :title "Critical Line\\n(Forced Shutdown)")
    (mapc (curry #'draw-temp s)
          (group-by #'node=
                    ;; (conjoin #'node= #'core= #'adapter=)
                    (remove-if-not #'core-line-p
                                   (mapcar #'read-many (read-lines input)))))
    (draw-jobs s
               (remove-if-not #'jobs-line-p
                              (mapcar #'read-many (read-lines input))))))

