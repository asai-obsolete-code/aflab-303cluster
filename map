#!/bin/bash
#-*- mode:sh -*-

ssh=ssh

PARALLEL=false
SUDO=false
SUDO_PASSWORD=
LUCY=false
PROFILE=false
USER=$(whoami)
VERBOSE=false

vecho (){
    $VERBOSE && echo $@
}

gethosts (){
    if [[ -f ./hosts ]]
    then
        vecho "Found a hosts file in the current directory"
        HOSTSFILE=./hosts
    elif [[ -f $(dirname $0)/hosts ]]
    then
        vecho "Found a hosts file in the directory same as the script"
        HOSTSFILE=$(dirname $0)/hosts
    else
        vecho "Using the defauilt hosts file"
        HOSTSFILE=$(dirname $(readlink -ef $0))/hosts
    fi
}

gethosts

while [[ $* != "" ]]
do
    opt=$1
    case $opt in
        -v) VERBOSE=true
            vecho "Verbose output enabled." ;;
        -p) PARALLEL=true
            vecho "Invoking ssh in parallel." ;;
        -h) HOSTSFILE=$2
            shift
            vecho "Using alternative hosts file $HOSTSFILE." ;;
        -s) SUDO=true
            SUDO_PASSWORD=$2
            if [[ $SUDO_PASSWORD == "-" ]]
            then
                read -p "Enter sudo authentication password for user $USER: " SUDO_PASSWORD
            fi
            shift
            vecho "Enabling sudo." ;;
        -l|--lucy) LUCY=true
            vecho "Added funlucy to the mapped hosts." ;;
        -u) USER=$2
            shift
            vecho "Shall log in as user $USER." ;;
        --) shift
            break ;;
        --profile)
            PROFILE=true;;
        -*) vecho "unsupported option $opt"
            exit 1 ;;
        * ) break ;;
    esac
    shift
done

acc=

while [[ $# != "0" && $1 != "--" ]]
do
    acc="$acc $1"
    shift
done

if [[ $1 == "--" ]]
then
    shift
    ssh_option="$acc"
    commands=$@
else
    ssh_option=""
    commands="$acc"
fi

hosts=$(cat $HOSTSFILE | sed -e "s/#.*//g")

$LUCY && hosts="funlucy $hosts"
$SUDO && commands="echo $SUDO_PASSWORD | sudo -S -p \"\" -- sh -c \"$commands\""
$PARALLEL && ssh_option="-t $ssh_option"
$PROFILE && ssh="time ssh"

vecho "#######################################"

vecho "Running command: $commands"
vecho "SSH options: $ssh_option"
vecho "Final command to run: $ssh $ssh_option -- <host> \"cd $PWD; $commands\""

run (){
    $ssh $ssh_option -- $USER@$host "cd $PWD; $commands"
}

# trap definition

handle (){
    vecho aborting... killing all subprocesses
    for child in $(pgrep -P $$)
    do
        kill -s $1 $child
    done
    exit
}

for signal in sighup sigtrap sigint sigterm sigxcpu sigabrt
do
    trap "handle $signal" $signal
done

for host in $hosts
do
    vecho "logging in to $host..."
    if $PARALLEL
    then
        run &
    else
        run
    fi
done

wait
